Array Tasks

Task-1

.MODEL SMALL
.STACK 100H
.DATA
A DB "ENTER THE LENGHT OF YOUR NAME: $"     
B DB "ENTER YOUR NAME: $"
C DB "THE NAME YOU ENTERED IS: $"
LENG DB ? 
NAME_ARR DB 40 DUP(?)
.CODE
MAIN PROC
    MOV AX,@DATA
    MOV DS,AX 
    
    
    MOV AH,9H
    LEA DX,A
    INT 21H
    
    ;FOR LENGTH
    MOV AH,1H 
    INT 21H
    SUB AL,48
    MOV LENG,AL
    
    ;FOR LINE BREAK   
    MOV AH,2H
    MOV DX,0AH
    INT 21H
    MOV DX,0DH
    INT 21H 
    
    
    MOV AH,9H
    LEA DX,B
    INT 21H 
    
    ;FOR INSERTING NAME INTO EMPTY ARRAY
    LEA SI,NAME_ARR
    MOV CX,0
    MOV CL,LENG
    START:
    MOV AH,1H
    INT 21H
    MOV [SI],AL
    INC SI
    LOOP START  
                  
    ;FOR LINE BREAK
    MOV AH,2H
    MOV DX,0AH
    INT 21H
    MOV DX,0DH
    INT 21H
    
    MOV AH,09H
    LEA DX,C
    INT 21H 
    
    ;FOR PRINTING THE NAME
    LEA SI,NAME_ARR
    MOV CX,0
    MOV CL,LENG
    PRINT:
    MOV DX,[SI]
    MOV AH,02H
    INT 21H
    INC SI
    LOOP PRINT
    
    
    
    
    
    MAIN ENDP
END MAIN
    

Task-2

.MODEL SMALL
.STACK 100H
.DATA
A DB "ENTER THE NUMBERS: $"
B DB "THE SORTING ARRAY IS: $"
ARR DB 5 DUP(?)
.CODE
MAIN PROC
    MOV AX,@DATA
    MOV DS,AX
    
    MOV AH,09H
    LEA DX,A
    INT 21H
    
    ;FOR TAKING NUMBERS AS INPUT
    LEA SI,ARR
    MOV CX,5
    INPUT:
    MOV AH,01H
    INT 21H 
    SUB AL,48
    MOV [SI],AL
    INC SI
    LOOP INPUT
    
    MOV CX,5
    DEC CX          
    OUTER:
    LEA SI,ARR
    MOV DX,CX       
    INNER:
    MOV AL,[SI]
    MOV BL,[SI+1]
    CMP AL,BL
    JLE NEXT
    
    MOV [SI],BL
    MOV [SI+1],AL
    
    NEXT:
    INC SI 
    DEC DX
    JNZ INNER 
    LOOP OUTER
    
    ;FOR LINE BREAK
    MOV AH,02H
    MOV DX,0AH
    INT 21H
    MOV DX,0DH
    INT 21H   
    
    MOV AH,09H
    LEA DX,B
    INT 21H
    
    ;FOR OUTPUT
    LEA SI,ARR
    MOV CX,5
    OUTPUT: 
    MOV AH,02H
    MOV DL,[SI] 
    ADD DL,48
    INT 21H
    INC SI
    LOOP OUTPUT
    
    
    MAIN ENDP
END MAIN


Task-3

.MODEL SMALL
.STACK 100H
.DATA
A DB "ENTER THREE NUMBERS: $"
B DB "THE MAXIMUM NUMBER IS: $"
ARR DB 3 DUP(?)
MAX DB ?
.CODE
MAIN PROC
    MOV AX,@DATA
    MOV DS,AX
    
    MOV AH,09H
    LEA DX,A
    INT 21H
    
    ;FOR TAKING THREE NUMBERS AS INPUT
    LEA SI,ARR
    MOV CX,3
    INPUT:
    MOV AH,01H
    INT 21H 
    SUB AL,48
    MOV [SI],AL
    INC SI
    LOOP INPUT 
    
    
    ;FOR CHECKING THE MAXIMUM
    LEA SI,ARR
    MOV AL,[SI]
    MOV CX,2
    MAXIMUM:
    ADD SI,1
    MOV BL,[SI]
    CMP AL,BL
    JGE NEXT
    MOV AL,BL
    NEXT:
    LOOP MAXIMUM 
    MOV MAX,AL 
    
    ;FOR LINE BREAK
    MOV AH,02H
    MOV DX,0AH
    INT 21H
    MOV DX,0DH
    INT 21H   
    
    MOV AH,09H
    LEA DX,B
    INT 21H
    
    ;FOR OUTPUT
    MOV AH,02H
    MOV DL,MAX
    ADD DL,48
    INT 21H
    
    
    
    MAIN ENDP
END MAIN



Stack tasks

Task-1

.MODEL SMALL
.STACK 100H
.DATA
A DB "FACTORS: $"
INPUT DB 12
.CODE
MAIN PROC
    MOV AX,@DATA
    MOV DS,AX
    
     
    MOV CL,INPUT
    MOV BL,1
    MOV SI,0
    
    FACTOR:
    CMP BL,CL
    JG END_LOOP
    MOV AL,INPUT
    XOR AH,AH
    DIV BL
    CMP AH,0
    JNE NOT_FACTOR
    PUSH BX
    INC SI
    
    NOT_FACTOR:
    INC BX
    LOOP FACTOR
    END_LOOP:  
     
    
    MOV AH,09H
    LEA DX,A
    INT 21H
    
    
    MOV CX,SI 
    OUTPUT:
    MOV AH,02H
    POP DX
    ADD DX,48
    INT 21H
    LOOP OUTPUT
    
    MAIN ENDP
END MAIN
    
 

Task-2


.MODEL SMALL
.STACK 100H  
.DATA  

A DB "HELLO$"  

.CODE 
MAIN PROC
    MOV AX,@DATA
    MOV DS,AX
    
    
    MOV AH,09H
    LEA DX,A
    INT 21H
   
    MOV AH,02H
    MOV DX,0AH
    INT 21H
    MOV DX,0DH
    INT 21H
    
    
    MOV CX,5
    MOV SI,0
    PUSH_STACK:
    MOV DL,A[SI]
    PUSH DX
    INC SI
    LOOP PUSH_STACK

    ;FOR REVERSING THE STRING
    MOV CX,5
    POP_STACK:
    POP DX
    MOV AH,02H
    ADD DL,0
    INT 21H
    LOOP POP_STACK:
     
    MAIN ENDP
END MAIN


Task-3

.MODEL SMALL
.STACK 100H
.DATA
INPUT DW 12213
A DB "DIGITS ARE UNIQUE$"
B DB "DIGITS ARE NOT UNIQUE$"
.CODE

MAIN PROC
    MOV AX,@DATA
    MOV DS,AX
    
    MOV AX,INPUT
    MOV CX,0
    
    LOOP1:
    MOV DX,0
    MOV BX,10
    DIV BX
    PUSH DX
    INC CX
    CMP AX,0
    JNE LOOP1
    
    MOV BX,CX
    LOOP2:
    POP DX
    MOV SI,0
    MOV DI,BX
    
    LOOP3:
    CMP DI,1
    JE SKIP
    MOV BP,SP
    MOV CX,DI
     
    INNER:
    CMP DX,[BP]
    JE NOT_UNIQUE
    INC BP
    INC BP
    loop INNER
    
    SKIP:
    DEC DI ; decrement the loop counter
    JNZ LOOP3
    DEC BX ; decrement the number of digits
    JNZ LOOP2
    
    MOV AH,09H
    LEA DX,A
    INT 21H
    JMP EXIT
    
    NOT_UNIQUE:
    MOV AH,09H
    LEA DX,B
    INT 21H
    
    
    EXIT:
    
    MAIN ENDP
END MAIN


Task-4


.MODEL SMALL
.STACK 100H

.DATA
  MSG1 DB 'ENTER NO: $'
  MSG2 DB 'PRIME NUMBERS: $'
  MSG3 DB '$'

.CODE
MAIN PROC
  MOV AX,@DATA
  MOV DS,AX

  LEA DX,MSG1
  MOV AH,9
  INT 21H

  MOV BH,0
  MOV BL,10D
INPUT:
  MOV AH,1
  INT 21H
  CMP AL,13D
  JNE NUM
  JMP PRINT_PRIMES
NUM:
  SUB AL,30H
  MOV CL,AL
  MOV AL,BH
  MUL BL
  ADD AL,CL
  MOV BH,AL
  JMP INPUT

PRINT_PRIMES:
  LEA DX,MSG2
  MOV AH,9
  INT 21H

  MOV CX,2
  MOV DX,0 
  MOV BL,BH 
  DEC BL 
  MOV BH,0
  MOV BX,BX

LBL1:
 
  MOV AX,CX
  MOV DX,0
  MOV SI,2
LBL2:
  CMP SI,AX
  JGE LBL3
  DIV SI
  CMP DX,0
  JZ NOT_PRIME
  INC SI
  JMP LBL2
LBL3:
 
  MOV DX,0
  MOV AX,CX 
  MOV SI,10 
  MOV AH,0

  
  CMP AX,10
  JL SINGLE_DIGIT

  MOV AX,CX
  DIV SI
  MOV DL,AL 
  ADD DL,30H 
  MOV AH,2
  INT 21H

  MOV AX,CX
  MOV DX,0
  DIV SI
  MOV DL,AH 
  ADD DL,30H 
  MOV AH,2
  INT 21H 

  JMP PRINT_SPACE

SINGLE_DIGIT:
  
  ADD AX,30H 
  MOV DL,AL
  MOV AH,2
  INT 21H 

PRINT_SPACE:
  MOV DL,' ' 
  MOV AH,2
  INT 21H
  JMP NEXT_NUM
NOT_PRIME:
  MOV SI,0
NEXT_NUM:
  INC CX
  CMP CX,BX
  JL LBL1 

  LEA DX,MSG3
  MOV AH,9
  INT 21H

  MOV AH,4CH
  INT 21H

MAIN ENDP
END MAIN



Task-5

.MODEL SMALL
.STACK 100H

.DATA
  MSG1 DB 'ENTER TEXT: $'
  MSG2 DB 'REVERSED TEXT: $'

.CODE
MAIN PROC
  MOV AX, @DATA
  MOV DS, AX

  LEA DX,MSG1
  MOV AH,09H
  INT 21H

  MOV CX,0 
INPUT:
  MOV AH,01H
  INT 21H
  CMP AL,13
  JE PROCESS_TEXT 
  PUSH AX 
  INC CX 
  JMP INPUT 

PROCESS_TEXT:
  LEA DX, MSG2
  MOV AH, 9
  INT 21H

  MOV AH,02H 
PRINT_LOOP:
  CMP CX,0 
  JE END_PRINT 
  POP DX 
  INT 21H 
  DEC CX 
  JMP PRINT_LOOP 

END_PRINT:
  
    MOV AH,02H
    MOV DX,0AH
    INT 21H
    MOV DX,0DH
    INT 21H


MAIN ENDP
END MAIN